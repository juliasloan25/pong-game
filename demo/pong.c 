#include "pong.h"

const double WIDTH = 600; //screen width
const double HEIGHT = 800; //screen height
const double BALL_RADIUS = 10.0; //radius of pong ball
const double PADDLE_WIDTH = 50.0; //width of the pong paddle
const double PADDLE_HEIGHT = 30.0; // height of the pong paddle
const double BALL_MASS = 100; // mass of the pong ball;
const RGBColor PADDLE_COLOR = {
    .r = 0,
    .g = 0,
    .b = 0
}; //black paddle color
const RGBColor BALL_COLOR = {
    .r = 0,
    .g = .5,
    .b = 1
}; //color of the pong ball


int main(int argc, char **argv){
    //Initialize scene and window
    Scene *scene = scene_init();
    window_init();

    //create paddle and initializes on the side of the screen
    Vector paddle_one__center = {
        .x = 20.0,
        .y = HEIGHT/2
    };
    Vector paddle_two_center = {
        .x = 580,
        .y  = HEIGHT/2
    };

    //if two player
    BodyType *paddle_type = malloc(sizeof(BodyType));
    *(paddle_type) = PADDLE;
    Body *paddle_one = make_body(paddle_type, paddle_center, PADDLE_COLOR);
    Body *paddle_two = make_body(paddle_type,paddle_center,PADDLE_COLOR);
    scene_add_body(scene, paddle_one);
    scene_add_body(scene, paddle_two);

    //create ball
    Vector ball_center = {
        .x = WIDTH / 2.0,
        .y = HEIGHT/ 2.0
    };
    BodyType *ball_type = malloc(sizeof(BodyType));
    *(ball_type) = BALL;
    Body *ball = make_body(ball_type, ball_center, BALL_COLOR);
    scene_add_body(scene, ball);

    //create bouncing collision between paddle and ball
    create_physics_collision(scene, ELASTICITY, paddle, ball);

    sdl_on_key(on_key); //handles key inputs

    while(!sdl_is_done(scene)) {
        double wait_time = time_since_last_tick();
        //checks if paddle or ball has hit walls or ceiling
        bool ball_hit_bottom = move_if_offscreen(paddle_one, ball);
        if(ball_hit_bottom){
            reset(scene);
        }
        //Render and update scene at every tick
        scene_tick(scene, wait_time);
        sdl_render_scene(scene);
    }

    //Free all elements of scene
    scene_free(scene);

    return 1;
}
